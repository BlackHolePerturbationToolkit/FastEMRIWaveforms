[build-system]
build-backend = "scikit_build_core.build"

requires = [ "cython", "numpy", "scikit-build-core" ]

[project]
name = "fastemriwaveforms" #@NAMESUFFIX@

description = "Fast and accurate EMRI Waveforms."

readme = "README.md"

maintainers = [
  { name = "Michael Katz", email = "mikekatz04@gmail.com" },
  { name = "Christian Chapman-Bird", email = "c.chapmanbird@gmail.com" },
]

authors = [
  { name = "Michael Katz", email = "mikekatz04@gmail.com" },
  { name = "Lorenzo Speri", email = "lorenzo.speri@gmail.com" },
  { name = "Christian Chapman-Bird", email = "c.chapmanbird@gmail.com" },
  { name = "Alvin J. K. Chua" },
  { name = "Niels Warburton", email = "nielsw@gmail.com" },
  { name = "Scott Hughes" },
]
classifiers = [
  "Environment :: GPU :: NVIDIA CUDA",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: C++",
  "Programming Language :: Cython",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

# version is deduced from the lattest git tag
# description is the docstring at the top of src/few/__init__.py
dynamic = [ "version" ]

dependencies = [
  "cffconvert",                            # To read and validate CITATION.cff
  "exceptiongroup; python_version<'3.11'", # To access ExceptionGroup with Python 3.9 and 3.10
  "h5py",
  "jsonschema",                            # To validate content of file registry
  "multispline",
  "numba",
  "numpy",
  "nvidia-ml-py",                          # To detect CUDA version if any
  "platformdirs",                          # To locate config and data dir on all platforms
  "pydantic",                              # To handle citations and references with advanced dataclasses
  "pyyaml",                                # To read file registry
  "requests",                              # To download files automatically
  "rich",                                  # To display downlaod progress bar
  "scipy",
  "tqdm",
  #@DEPS_CUPYCUDA@,
  #@DEPS_FEWCORE@,
]

optional-dependencies.doc = [
  "ipykernel",
  "ipython",
  "ipywidgets",
  "myst-parser",
  "nbsphinx",
  "pypandoc",
  "sphinx",
  "sphinx-rtd-theme",
  "sphinx-tippy",
]

optional-dependencies.sampling = [
  "eryn",
  "fastlisaresponse",
  "lisaanalysistools",
  "lisatools",
]

optional-dependencies.testing = [
  "matplotlib",
]

urls.Documentation = "https://bhptoolkit.org/FastEMRIWaveforms/html/index.html"
urls.Download = "https://pypi.org/project/fastemriwaveforms/#files"
urls.Homepage = "https://github.com/BlackHolePerturbationToolkit/FastEMRIWaveforms"
urls.Source = "https://github.com/BlackHolePerturbationToolkit/FastEMRIWaveforms"
urls.Tracker = "https://github.com/BlackHolePerturbationToolkit/FastEMRIWaveforms/issues"

scripts.few_citations = "few.cmd.citations:main"
scripts.few_files = "few.cmd.files:main"

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"
version_file = "src/few/_version.py"

[tool.scikit-build]
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = [ "src/few/_version.py" ]
sdist.exclude = [
  "docs/",
  ".ci-environments",
  ".cmake-format.yaml",
  "data_for_FEW/",
  ".devcontainer",
  "EllipticIntegrals",
  "examples",
  ".github",
  ".gitignore",
  "gpu_test.py",
  "integrate_backwards.py",
  "KerrEquatorialCodes/",
  "KerrEquatorialPaper.md",
  ".pre-commit-config.yaml",
  "prior_emri.py",
  "produce_TPI_coeff.py",
  "SeparatrixInterpolant_example.ipynb",
  "tests/",
  "TODO.txt",
  "Tutorial_interpolation.ipynb",
]
wheel.packages = [
  "src/few", #@SKIP_PLUGIN@
]
wheel.exclude = [
  "**.pyx",
  "**.cu",
  "**.cxx",
  "**.hh",
  "**.h",
  "**.hpp",
  "**/CMakeLists.txt",
  "lib/pkgconfig",
  "lib/cmake",
  "lib/*.so",
  "lib/*.a",
]

[tool.scikit-build.cmake.define]
# Default values for CMake options used when building FEW.
# These can be tuned on CLI as follows:
#   $ pip install . --config-settings=cmake.define.FEW_LAPACKE_FETCH=OFF

# Whether LAPACK should be automatically fetched and compiled.
#  note: for now this option is ignored and LAPACK is always fetched
FEW_LAPACKE_FETCH = "AUTO"

# Whether to search for LIBNAME-config.cmake file or for libname.pc file
# To detect and link LAPACK(E)
FEW_LAPACKE_DETECT_WITH = "AUTO" # or "PKGCONFIG" or "CMAKE"

# List of libs that must be linked to build against LAPACKE
# FEW_LAPACKE_LIBS = "lapack;lapacke;gfortran"

# Whether GPU support should be enabled
#  NO: GPU support is disabled
#  YES: GPU support is mandatory, install will fail if prerequisites are
#       not met (missing CUDA and CUDAToolKit in environment)
#  AUTO: GPU support enabled only if CUDA and CUDAToolKit are found
FEW_WITH_GPU = "AUTO" # ON | OFF | AUTO

# What CUDA architectures to target.
# See https://cmake.org/cmake/help/latest/prop_tgt/CUDA_ARCHITECTURES.html
FEW_CUDA_ARCH = "all"

[tool.ruff]

extend-include = [
  "!*.py",
  # Enable Ruff on a white-list approach for now
  "!src/few/files/manager.py",
  "!src/few/files/registry.py",
  "!src/few/utils/config.py",
  "!src/few/utils/exceptions.py",
  "!src/few/utils/globals.py",
]

lint.extend-select = [
  "T201", # Fail when "print" is used, to be replaced with logger calls
]

lint.ignore = [ "E741" ]

lint.extend-per-file-ignores."*.ipynb" = [ "T201" ] # Allow "print" statements in notebooks

[tool.pyproject-fmt]
max_supported_python = "3.12"

[tool.coverage]
paths.source = [
  "src/",
  "**/site-packages/",
]

report.omit = [
  "*/few/_version.py",
]
